{
	"camera" : 
	{
		"center" : "0.000 0.000 -1.000",
		"eye" : "0.000 0.000 0.000",
		"up" : "0.000 1.000 0.000"
	},
	"general" : 
	{
		"ambientcolor" : "0.300 0.300 0.300",
		"bloom" : 
		{
			"user" : "globalbloom",
			"value" : false
		},
		"bloomstrength" : 2.0,
		"bloomthreshold" : 0.64999997615814209,
		"camerafade" : true,
		"cameraparallax" : false,
		"cameraparallaxamount" : 0.5,
		"cameraparallaxdelay" : 0.10000000149011612,
		"cameraparallaxmouseinfluence" : 0.0,
		"camerapreview" : true,
		"camerashake" : false,
		"camerashakeamplitude" : 0.5,
		"camerashakeroughness" : 1.0,
		"camerashakespeed" : 3.0,
		"clearcolor" : "0.000 0.000 0.000",
		"clearenabled" : true,
		"farz" : 10000.0,
		"fov" : 50.0,
		"nearz" : 0.0099999997764825821,
		"orthogonalprojection" : 
		{
			"height" : 1920,
			"width" : 3415
		},
		"skylightcolor" : "0.300 0.300 0.300",
		"zoom" : 1.0
	},
	"objects" : 
	[
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.000 0.000 0.000",
			"color" : 
			{
				"user" : "terminalbgcolr",
				"value" : "0.114 0.325 0.710"
			},
			"colorBlendMode" : 0,
			"copybackground" : true,
			"effects" : 
			[
				{
					"file" : "effects/perspective/effect.json",
					"id" : 129,
					"name" : "",
					"passes" : 
					[
						{
							"combos" : 
							{
								"MODE" : 1
							},
							"constantshadervalues" : 
							{
								"bottom" : 0.02
							},
							"id" : 130
						}
					],
					"visible" : false
				}
			],
			"id" : 126,
			"image" : "models/util/solidlayer.json",
			"ledsource" : false,
			"locktransforms" : true,
			"name" : "Screen Background",
			"origin" : "1580.000 1280.000 0.000",
			"parallaxDepth" : "1.000 1.000",
			"perspective" : false,
			"scale" : "1.000 1.000 1.000",
			"size" : "950.000 700.000",
			"solid" : true,
			"visible" : false
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.000 0.000 0.000",
			"backgroundcolor" : "0.000 0.000 0.000",
			"color" : 
			{
				"user" : "textcolour",
				"value" : "1.000 1.000 1.000"
			},
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FSEX302-alt.ttf",
			"horizontalalign" : "left",
			"id" : 140,
			"ledsource" : false,
			"locktransforms" : true,
			"name" : "Prompt",
			"opaquebackground" : false,
			"origin" : "1175.000 1050.000 0.000",
			"padding" : 32,
			"parallaxDepth" : "1.000 1.000",
			"perspective" : false,
			"pointsize" : 9.0,
			"scale" : "1.000 1.000 1.000",
			"size" : "37.000 38.000",
			"solid" : true,
			"text" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'prompt',\n\t\tlabel: 'Prompt',\n\t\tvalue: '>'\n\t})\n\t.addText({\n\t\tname: 'blinkCursorOn',\n\t\tlabel: 'Cursor On',\n\t\tvalue: '█'\n\t})\n\t.addText({\n\t\tname: 'blinkCursorOff',\n\t\tlabel: 'Cursor Off',\n\t\tvalue: '_'\n\t})\n\t.finish();\n\nvar blinkCursors = [scriptProperties.blinkCursorOn, scriptProperties.blinkCursorOff]\n\nexport function update(value) {\n\tlet time = new Date();\n\tvar prompt = scriptProperties.prompt;\n\tvar blinkingCursor = blinkCursors[(time.getSeconds()%2)];\n\n\tvalue = prompt + blinkingCursor;\n\n\treturn value;\n}\n",
				"scriptproperties" : 
				{
					"blinkCursorOff" : "█",
					"blinkCursorOn" : "_",
					"prompt" : 
					{
						"user" : "prompt",
						"value" : ">"
					}
				},
				"value" : ">_"
			},
			"verticalalign" : "bottom",
			"visible" : 
			{
				"script" : "'use strict';\n\nlet show = false;\n\nexport function applyUserProperties(userProperties){\n\tif (userProperties.hasOwnProperty(\"scrollingtext\")){\n\t\tshow = !userProperties.scrollingtext;\n\t}\n}\n\nexport function update(_value) {\n\t\n\treturn show;\n}\n",
				"value" : true
			}
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.000 0.000 0.000",
			"backgroundcolor" : "0.000 0.000 0.000",
			"color" : 
			{
				"user" : "textcolour",
				"value" : "1.000 1.000 1.000"
			},
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FSEX302-alt.ttf",
			"horizontalalign" : "left",
			"id" : 197,
			"ledsource" : false,
			"locktransforms" : true,
			"name" : "Autotyped Code",
			"opaquebackground" : false,
			"origin" : "1175.000 1050.000 0.000",
			"padding" : 32,
			"parallaxDepth" : "1.000 1.000",
			"perspective" : false,
			"pointsize" : 9.0,
			"scale" : "1.000 1.000 1.000",
			"size" : "2.000 2.000",
			"solid" : true,
			"text" : 
			{
				"script" : "'use strict';\n\nexport var scriptProperties = createScriptProperties()\n\t.addText({\n\t\tname: 'scrollingTextContents',\n\t\tlabel: 'ScrollingText',\n\t\tvalue: 'You shouldn’t see this unless you’re editing, please report it to me.'\n\t})\n\t.addSlider({\n\t\tname: 'outputNoOfLines',\n\t\tlabel: 'Number of lines',\n\t\tvalue: 13,\n\t\tmin: 0,\n\t\tmax: 15,\n\t\tinteger: false\n\t})\n\t.finish();\n\n//var completeOutput = scriptProperties.scrollingTextContents;\n\n//I declare this outside so we're not constantly creating and\n//deleting vars for performance reasons, I don't know if this\n//is necessary\nlet i = 0;\n\n// N.B. replaces spaces with “punctuation spaces” (U+2008)\n// as a workaround for WE eating leading spaces.\nfunction formatText(text){\n\treturn text.replace(/ /g, \" \");\n}\n\n// This does the heavy lifting of removing the older lines\n// from the terminal screen.\nfunction trimOutput(text, noOfLines){\n\tlet splitText = text.split(\"\\n\");\n\tif (splitText.length >= noOfLines){\n\t\ttext = splitText.splice((splitText.length-noOfLines), splitText.length);\n\t} else {\n\t\ttext = splitText; //.splice(splitText.length);\n\t}\n\treturn text.join(\"\\n\");\n}\n\nexport function update(output) {\n\t\n\toutput += scriptProperties.scrollingTextContents.charAt(i);  // append character to give the illusion of typing\n\tif (i <= scriptProperties.scrollingTextContents.length){  //loops around when it gets to the end of the text\n\t\ti++;\n\t} else {\n\t\toutput += \"\\n\\n\";  //add extra new lines at the end of the text\n\t\ti = 0;\n\t}\n\n\treturn formatText(trimOutput(output, scriptProperties.outputNoOfLines));\n}\n",
				"scriptproperties" : 
				{
					"outputNoOfLines" : 15,
					"scrollingTextContents" : "struct group_info init_groups={ \n  .usage=ATOMIC_INIT(2) \n}; \n \nstruct group_info \n    *groups_alloc(int gidsetsize){ \n  struct group_info *group_info; \n  int nblocks; \n  int i; \n \n  nblocks=( \n    gidsetsize+NGROUPS_PER_BLOCK-1 \n  )/NGROUPS_PER_BLOCK; \n \n  /* Make sure we always allocate at \n  least one indirect block pointer */ \n \n  nblocks=nblocks ? : 1; \n  group_info=kmalloc(sizeof(*group_info) \n  +nblocks*sizeof(gid_t *), GFP_USER); \n  if (!group_info){ \n    return NULL; \n  } \n  group_info->ngroups=gidsetsize; \n  group_info->nblocks=nblocks; \n  atomic_set(&group_info->usage, 1); \n \n  if (gidsetsize<=NGROUPS_SMALL){ \n    group_info->blocks[0]= \n       group_info->small_block; \n  } else { \n    for (i=0; i<nblocks; i++) { \n      gid_t *b; \n      b=(void *)__get_free_page(GFP_USER); \n      if (!b) \n        goto out_undo_partial_alloc; \n      group_info->blocks[i]=b; \n    } \n  } \n  return group_info; \n \nout_undo_partial_alloc: \n  while (--i>=0) { \n    free_page((unsigned long) \n       group_info->blocks[i]); \n  } \n  kfree(group_info); \n  return NULL; \n} \n \nEXPORT_SYMBOL(groups_alloc); \n \nvoid groups_free( \n    struct group_info *group_info) \n{ \n  if (group_info->blocks[0] \n      !=group_info->small_block) { \n    int i; \n    for (i=0; i<group_info->nblocks; i++) \n      free_page((unsigned long) \n        group_info->blocks[i]); \n  } \n  kfree(group_info); \n} \n \nEXPORT_SYMBOL(groups_free); \n \n/* export the group_info \nto a user-space array */ \n \nstatic int groups_to_user( \n    gid_t __user *grouplist, \n    const struct group_info *group_info \n){ \n  int i; \n  unsigned int count=group_info->ngroups; \n \n  for (i=0; i<group_info->nblocks; i++) { \n    unsigned int cp_count=min( \n        NGROUPS_PER_BLOCK, count \n    ); \n    unsigned int len=cp_count*sizeof( \n        *grouplist \n    ); \n \n    if (copy_to_user( \n        grouplist, group_info->blocks[i], len \n    )){ \n      return -EFAULT; \n \n    grouplist+=NGROUPS_PER_BLOCK; \n    count-=cp_count; \n    } \n} \nreturn 0;"
				},
				"value" : ""
			},
			"verticalalign" : "bottom",
			"visible" : 
			{
				"user" : "scrollingtext",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.000 0.000 0.000",
			"color" : "1.000 1.000 1.000",
			"colorBlendMode" : 0,
			"config" : 
			{
				"passthrough" : true
			},
			"copybackground" : true,
			"effects" : 
			[
				{
					"file" : "effects/tint/effect.json",
					"id" : 93,
					"name" : "Colourise",
					"passes" : 
					[
						{
							"combos" : 
							{
								"BLENDMODE" : 9
							},
							"constantshadervalues" : 
							{
								"color" : 
								{
									"script" : null,
									"user" : "terminalbgcolr",
									"value" : "1.000 1.000 1.000"
								}
							},
							"id" : 94
						}
					],
					"visible" : true
				},
				{
					"file" : "effects/godrays/effect.json",
					"id" : 186,
					"name" : "Text Glow",
					"passes" : 
					[
						{
							"combos" : 
							{
								"NOISE" : 1
							},
							"constantshadervalues" : 
							{
								"noiseamount" : 0.40000000000000002,
								"noisescale" : 3.0,
								"noisesmoothness" : 0.20000000000000001,
								"noisespeed" : 0,
								"raythreshold" : 0
							},
							"id" : 187,
							"textures" : [ null, "util/white", "util/clouds_256" ]
						},
						{
							"combos" : 
							{
								"CASTER" : 0,
								"SAMPLES" : 0
							},
							"constantshadervalues" : 
							{
								"center" : "0.5 0.5",
								"color" : "1 1 1",
								"rayintensity" : 
								{
									"user" : "terminaltextglow",
									"value" : 0.63999998569488525
								},
								"raylength" : 0
							},
							"id" : 190
						},
						{
							"combos" : 
							{
								"KERNEL" : 1
							},
							"constantshadervalues" : 
							{
								"blurscale" : "2 2"
							},
							"id" : 191
						},
						{
							"combos" : 
							{
								"KERNEL" : 1,
								"VERTICAL" : 1
							},
							"constantshadervalues" : 
							{
								"blurscale" : "2 2"
							},
							"id" : 194
						},
						{
							"combos" : 
							{
								"BLENDMODE" : 9
							},
							"id" : 195,
							"textures" : [ null, "_rt_imageLayerComposite_102_b" ]
						}
					],
					"visible" : 
					{
						"user" : "crteffects",
						"value" : true
					}
				},
				{
					"file" : "effects/workshop/2116673772/crt_scan_line/effect.json",
					"id" : 192,
					"name" : "CRT FX",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"Noise Intensity" : 
								{
									"user" : "crtnoise",
									"value" : 0.20000000000000001
								},
								"Noise Scale" : 1.6799999475479126,
								"Scan Line Intensity" : 
								{
									"user" : "scanlineintensity",
									"value" : 0.12
								},
								"Scan Line Size" : 1,
								"Scan Line Speed" : 0,
								"Vignette Intensity" : 0.23999999999999999
							},
							"id" : 193
						}
					],
					"visible" : 
					{
						"user" : "crteffects",
						"value" : true
					}
				},
				{
					"file" : "effects/opacity/effect.json",
					"id" : 108,
					"name" : "Clip FX",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"alpha" : 1
							},
							"id" : 109,
							"textures" : [ null, "masks/opacity_mask_29c39f5351e23ed72b34d703d5044fc43f12c330" ]
						}
					],
					"visible" : false
				},
				{
					"file" : "effects/fisheye/effect.json",
					"id" : 104,
					"name" : "Pincushion FX",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"distortion" : 
								{
									"user" : "pincushioneffect",
									"value" : 0.78000000000000003
								}
							},
							"id" : 105
						}
					],
					"visible" : 
					{
						"user" : "crteffects",
						"value" : true
					}
				}
			],
			"id" : 102,
			"image" : "models/util/composelayer.json",
			"ledsource" : true,
			"locktransforms" : true,
			"name" : "Terminal Screen VFX",
			"origin" : "1585.000 1888.000 0.000",
			"parallaxDepth" : "1.000 1.000",
			"perspective" : false,
			"scale" : "1.000 1.000 1.000",
			"size" : "1280.000 2560.000",
			"solid" : true,
			"visible" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.000 0.000 0.000",
			"color" : "1.000 1.000 1.000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 122,
			"image" : "models/hollow.json",
			"ledsource" : false,
			"locktransforms" : true,
			"name" : "Image",
			"origin" : "1707.500 960.000 0.000",
			"parallaxDepth" : "1.000 1.000",
			"perspective" : false,
			"scale" : "1.000 1.000 1.000",
			"size" : "3415.000 1920.000",
			"solid" : true,
			"visible" : true
		}
	]
}